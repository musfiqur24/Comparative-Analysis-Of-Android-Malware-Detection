{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPQid/6a+fKQUYVvYpT04Fu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gIHEq5-eg7jY","executionInfo":{"status":"ok","timestamp":1719825534775,"user_tz":-480,"elapsed":5544,"user":{"displayName":"Musfiqur Rahman","userId":"10444599639774013556"}},"outputId":"3452edf5-8b84-4738-ae41-b54ff28b20c6"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-2-e8ba7f862f4a>:11: DtypeWarning: Columns (92) have mixed types. Specify dtype option on import or set low_memory=False.\n","  df = pd.read_csv('Original_Dataset.csv')\n"]},{"output_type":"stream","name":"stdout","text":["Decision Tree Results:\n","Accuracy: 0.9649280575539568\n","Precision: 0.9649596973439147\n","Recall: 0.9649957983635051\n","F1 Score: 0.9649278022862273\n","\n","SVM Results:\n","Accuracy: 0.9788669064748201\n","Precision: 0.9789832746478873\n","Recall: 0.9788070102222297\n","F1 Score: 0.9788616712278848\n"]}],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","from sklearn.impute import SimpleImputer\n","from sklearn.utils import resample\n","\n","# Load dataset\n","df = pd.read_csv('Original_Dataset.csv')\n","\n","# Replace '?' with NaN\n","df.replace('?', np.nan, inplace=True)\n","\n","# Separate features (X) and target variable (y)\n","X = df.drop(columns=['class'])\n","y = df['class']\n","\n","# Impute missing values\n","imputer = SimpleImputer(strategy='mean')\n","X = imputer.fit_transform(X)\n","\n","# Combine the imputed features and target variable back into a DataFrame for balancing\n","df_imputed = pd.DataFrame(X, columns=df.columns[:-1])\n","df_imputed['class'] = y.values\n","\n","# Balance the dataset\n","df_s = df_imputed[df_imputed['class'] == 'S']\n","df_b = df_imputed[df_imputed['class'] == 'B']\n","\n","# Downsample the majority class 'B' to match the minority class 'S'\n","df_b_downsampled = resample(df_b, replace=False, n_samples=len(df_s), random_state=42)\n","df_balanced = pd.concat([df_s, df_b_downsampled])\n","\n","# Save balanced dataset to CSV\n","df_balanced.to_csv('Balanced_Dataset.csv', index=False)\n","\n","# Separate features and target variable from the balanced dataset\n","X_balanced = df_balanced.drop(columns=['class'])\n","y_balanced = df_balanced['class']\n","\n","# Split the balanced data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42)\n","\n","# Initialize models\n","dt_model = DecisionTreeClassifier()\n","svm_model = SVC()\n","\n","# Train the models\n","dt_model.fit(X_train, y_train)\n","svm_model.fit(X_train, y_train)\n","\n","# Make predictions\n","dt_pred = dt_model.predict(X_test)\n","svm_pred = svm_model.predict(X_test)\n","\n","# Calculate metrics for Decision Tree\n","dt_accuracy = accuracy_score(y_test, dt_pred)\n","dt_precision = precision_score(y_test, dt_pred, average='macro')\n","dt_recall = recall_score(y_test, dt_pred, average='macro')\n","dt_f1 = f1_score(y_test, dt_pred, average='macro')\n","\n","# Calculate metrics for SVM\n","svm_accuracy = accuracy_score(y_test, svm_pred)\n","svm_precision = precision_score(y_test, svm_pred, average='macro')\n","svm_recall = recall_score(y_test, svm_pred, average='macro')\n","svm_f1 = f1_score(y_test, svm_pred, average='macro')\n","\n","# Print results\n","print(\"Decision Tree Results:\")\n","print(f\"Accuracy: {dt_accuracy}\")\n","print(f\"Precision: {dt_precision}\")\n","print(f\"Recall: {dt_recall}\")\n","print(f\"F1 Score: {dt_f1}\")\n","\n","print(\"\\nSVM Results:\")\n","print(f\"Accuracy: {svm_accuracy}\")\n","print(f\"Precision: {svm_precision}\")\n","print(f\"Recall: {svm_recall}\")\n","print(f\"F1 Score: {svm_f1}\")\n","\n"]}]}