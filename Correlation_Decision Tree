{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPaCt73KMqNFoPrX9dDhBng"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"OMwZFxlGtw8r","executionInfo":{"status":"ok","timestamp":1720475346913,"user_tz":-480,"elapsed":2710,"user":{"displayName":"Musfiqur Rahman","userId":"10444599639774013556"}},"outputId":"c83d9be3-1d49-48c8-cc88-51b654de5d07","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9358377659574468\n","Precision: 0.9372868995666798\n","Recall: 0.9261549315912964\n"]},{"output_type":"execute_result","data":{"text/plain":["['dt_model.pkl']"]},"metadata":{},"execution_count":1}],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import accuracy_score, precision_score, recall_score\n","import joblib\n","\n","# Read the dataset\n","df = pd.read_csv(\"filtered_Correlaton_dataset.csv\")\n","\n","# Separate features (X) and target variable (y)\n","X = df.drop(columns=['class'])\n","y = df['class']\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Initialize the Decision Tree model\n","dt_model = DecisionTreeClassifier()\n","\n","# Train the Decision Tree model\n","dt_model.fit(X_train, y_train)\n","\n","# Make predictions on the test set\n","y_pred = dt_model.predict(X_test)\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, y_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# Calculate precision\n","precision = precision_score(y_test, y_pred, average='macro')\n","print(\"Precision:\", precision)\n","\n","# Calculate recall\n","recall = recall_score(y_test, y_pred, average='macro')\n","print(\"Recall:\", recall)\n","\n","# Save the trained model to a file\n","joblib.dump(dt_model, \"dt_model.pkl\")\n","\n"]},{"cell_type":"markdown","source":["# Load Model"],"metadata":{"id":"J5vie1HyufnH"}},{"cell_type":"code","source":["import joblib\n","\n","# Load the trained model from the file\n","dt_model = joblib.load(\"dt_model.pkl\")\n","\n","# Now you can use dt_model.predict() to make predictions on new data"],"metadata":{"id":"wjr7GJ64uhDD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Test Model"],"metadata":{"id":"bOjg467gukfw"}},{"cell_type":"code","source":["import pandas as pd\n","import joblib\n","\n","# Load the trained model from the file\n","dt_model = joblib.load(\"dt_model.pkl\")\n","\n","# Assume you have new data in the same format as your training data\n","new_data = {\n","    \"SEND_SMS\": 1,\n","    \"android.telephony.SmsManager\": 1,\n","    \"READ_PHONE_STATE\": 1,\n","    \"RECEIVE_SMS\": 0,\n","    \"READ_SMS\": 0,\n","    \"android.intent.action.BOOT_COMPLETED\": 1,\n","    \"TelephonyManager.getLine1Number\": 0,\n","    \"WRITE_SMS\": 0,\n","    \"WRITE_HISTORY_BOOKMARKS\": 0,\n","    \"TelephonyManager.getSubscriberId\": 0,\n","    \"transact\": 0,\n","    \"onServiceConnected\": 0,\n","    \"bindService\": 0,\n","    \"ServiceConnection\": 0,\n","    \"android.os.Binder\": 0,\n","    \"attachInterface\": 0,\n","    \"Ljava.lang.Class.getCanonicalName\": 0,\n","    \"Ljava.net.URLDecoder\": 0,\n","    \"Ljava.lang.Class.cast\": 0,\n","    \"Ljava.lang.Class.getMethods\": 0\n","}\n","\n","# Convert the new data into a DataFrame\n","new_data_df = pd.DataFrame([new_data])\n","\n","# Make predictions on the new data\n","predicted_class = dt_model.predict(new_data_df)\n","\n","# Print the predicted class\n","print(\"Predicted Class:\", predicted_class[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XSFLH9RQul7J","executionInfo":{"status":"ok","timestamp":1714408959759,"user_tz":-480,"elapsed":3,"user":{"displayName":"Musfiqur Rahman","userId":"10444599639774013556"}},"outputId":"6b80d325-8daa-4c95-b8fb-e3fee655fe51"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted Class: S\n"]}]}]}