{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM9xkcnrsWRRpqhlTheuaV0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Training Data\n"],"metadata":{"id":"NFgWnG8Iz6Eu"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nhx06DZUzzP9","executionInfo":{"status":"ok","timestamp":1721114691611,"user_tz":-480,"elapsed":3121,"user":{"displayName":"Musfiqur Rahman","userId":"10444599639774013556"}},"outputId":"35866ec9-d8df-498b-953f-3f9dadc7230d"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-1-e8c300840312>:8: DtypeWarning: Columns (92) have mixed types. Specify dtype option on import or set low_memory=False.\n","  data = pd.read_csv(file_path)\n"]},{"output_type":"stream","name":"stdout","text":["Non-numeric columns: Index(['TelephonyManager.getSimCountryIso'], dtype='object')\n"]},{"output_type":"execute_result","data":{"text/plain":["['dt_model.pkl']"]},"metadata":{},"execution_count":1}],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","import joblib\n","\n","# Load the dataset\n","file_path = 'Original_Dataset.csv'\n","data = pd.read_csv(file_path)\n","\n","# Replace 'class' column values: 'S' -> 1 (Malware), 'B' -> 0 (Not Malware)\n","data['class'] = data['class'].map({'S': 1, 'B': 0})\n","\n","# Identify non-numeric columns\n","non_numeric_columns = data.select_dtypes(include=['object']).columns\n","print(\"Non-numeric columns:\", non_numeric_columns)\n","\n","# Drop non-numeric columns if they are not needed\n","data = data.drop(columns=non_numeric_columns)\n","\n","# Drop rows with missing values\n","data = data.dropna()\n","\n","# Define features and target\n","X = data.drop(columns=['class'])\n","y = data['class']\n","\n","# Split the data into 80% train and 20% test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Save the train and test data for later use\n","X_train.to_csv('X_train.csv', index=False)\n","X_test.to_csv('X_test.csv', index=False)\n","y_train.to_csv('y_train.csv', index=False)\n","y_test.to_csv('y_test.csv', index=False)\n","\n","# Initialize the Decision Tree classifier\n","dt_model = DecisionTreeClassifier(random_state=42)\n","\n","# Train the model\n","dt_model.fit(X_train, y_train)\n","\n","# Save the trained model\n","joblib.dump(dt_model, 'dt_model.pkl')\n"]},{"cell_type":"markdown","source":["Testing"],"metadata":{"id":"QSqTAmog0IeO"}},{"cell_type":"code","source":["import pandas as pd\n","import joblib\n","from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score\n","\n","# Load the test data\n","X_test = pd.read_csv('X_test.csv')\n","y_test = pd.read_csv('y_test.csv')\n","\n","# Load the trained model\n","dt_model = joblib.load('dt_model.pkl')\n","\n","# Predict on the test set\n","y_pred = dt_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred)\n","recall = recall_score(y_test, y_pred)\n","report = classification_report(y_test, y_pred)\n","\n","print(f'Accuracy: {accuracy:.2f}')\n","print(f'Precision: {precision:.2f}')\n","print(f'Recall: {recall:.2f}')\n","print('Classification Report:')\n","print(report)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o_04yQOy0Hg_","executionInfo":{"status":"ok","timestamp":1717614735835,"user_tz":-480,"elapsed":880,"user":{"displayName":"Musfiqur Rahman","userId":"10444599639774013556"}},"outputId":"d5a7cb3f-1f3c-4aac-e756-b6aad3d49b9c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.98\n","Precision: 0.97\n","Recall: 0.97\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.98      0.98      0.98      1863\n","           1       0.97      0.97      0.97      1145\n","\n","    accuracy                           0.98      3008\n","   macro avg       0.97      0.98      0.98      3008\n","weighted avg       0.98      0.98      0.98      3008\n","\n"]}]}]}